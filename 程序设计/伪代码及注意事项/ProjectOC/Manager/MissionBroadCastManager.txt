namespace ProjectOC.Manager
{
    // 搬运任务清单
    public struct CarryMission
    {
        int ID;

        int ItemID;

        int CurNum;

        int MissionNum;

        string SourceID;

        string DestinationID;

        Worker Worker;

        bool IsSettleBonus;
    }


    // 调度的时间管理器
    [System.Serializable]
    public sealed class MissionBroadCastManager : ILocalManager, ITickComponent
    {
        public MissionBroadCastManager()
        {
            Tick.Register
        }

        // 每次搬运结算时的基础经验值
        public const int BASEEXPPERCARRY;


        // 存储所有的Worker，Worker必须在此注册之后才能投入工作、休息,Worker状态切换时需要在此进行队列调度
        private Dict<WorkerStatus, List<Worker>> WorkerDict;

        // 待分配的优先队列,等待分配的任务队列
        // to-do : 优先队列的排序方式
        private PriorityQueue<CarryMission, Sort> MissionQueueToBeAssigned;

        // 已经分配但尚未完成的任务列表
        private List<CarryMission> MissionListHasBeAssigned;

        // 创建新的任务，返回值为null则创建失败
        // IsStore : true => 从Instigator处搬运至仓库，false => 从仓库搬运至Instigator
        public CarryMission CreateMission(int itemID, int MissionNum, string InstigatorID, bool IsStore)
        {
            // 存入
            if(IsStore)
            {
                string SourceID = InstigatorID;
                string DestinationID = "";
                string TempID = "";
                // 从头到尾遍历仓库(跳过玩家正在交互的仓库)
                foreach(var store in StoreManager.storeList)
                {
                    // 优先寻找第一个可以一次性存完的仓库
                    DestinationID = store.ID;break;
                    // 若没有，则寻找第一个可以存入的，可溢出存入
                    // 第一个可以存入，但不能一次性存入
                    TempID = store.ID;
                }
                if(DestinationID == "")
                {
                    if(TempID == "")
                    {
                        return null;
                    }
                    else
                    {
                        DestinationID = TempID;
                    }
                }
                // 生成任务
                CarryMission mission = new CarryMission();
                // to-do
                mission.ID;
                mission.ItemID = ItemID;
                mission.CurNum = 0;
                mission.MissionNum MissionNum;
                mission.SourceID = SourceID;
                mission.DestinationID = DestinationID;
                mission.Worker = null
                mission.IsSettleBonus = true;
                MissionQueueToBeAssigned.Enqueue(mission);

                // 把 Source 处的实际量更改为预留量

                // 把 Destination 处的实际空余量更改为预留存入量

                return mission;
            }
            // 取出
            else
            {
                依次遍历有容量的仓库(跳过玩家正在交互的仓库)
                找到一个就生成一个任务，直到生成的任务包含的材料清单
                满足生产节点发布的需要的清单
                若一个都没找到，则生成任务失败，由生产节点自己负责过一段时间再次调用
                若找到，但未全部满足，也返回成功，后续由生产节点自己再次调用
            }
            若生成任务失败，则由生产节点自己负责过一段时间再次调用
            return null;
        }

        // 每帧执行一次分配任务
        public void Tick(float deltatime)
        {
            任务发布分配时，有可以分配的Worker就直接分配，没有就跳过此帧，直到没有Worker可以分配
            每帧一直分配到可执行搬运任务的Worker数量为0
            可搬运 => 没有分配值班且处于摸鱼状态

            // 遍历WorkerDict处于摸鱼状态的Worker
            // 从MissionQueueToBeAssigned分配任务
            // 直到二者有一个为空，这一帧结束
        }

        public bool UpdateMission(CarryMission mission, int carryNum)
        {
            // 更新任务，由worker完成一次搬运时调用
            // 更新任务进度
            // 结算worker一次搬运的奖励和消耗
            // 若完成,则从MissionListHasBeAssigned取出任务
            // 返回值为任务是否完成
        }

        public void UpdateWorkerStatusList(Worker worker, Status PreStatus, Status NewStatus)
        {

        }
    }
}

