//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_ProjectOC/Scripts/Input/TechTreeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ProjectOC.TechTree.Input
{
    public partial class @TechTreeInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TechTreeInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TechTreeInput"",
    ""maps"": [
        {
            ""name"": ""TechTree"",
            ""id"": ""38814db0-a0b3-4728-b24b-ef5f41fe2e59"",
            ""actions"": [
                {
                    ""name"": ""LastTerm"",
                    ""type"": ""Button"",
                    ""id"": ""c6b97e21-f0b3-4484-8696-4d579bb3b320"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextTerm"",
                    ""type"": ""Button"",
                    ""id"": ""bae518f5-2b54-492f-9482-b8cba079d18b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decipher"",
                    ""type"": ""Button"",
                    ""id"": ""5caf42eb-23ad-4449-a6d4-3981f889fc20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AlterTP"",
                    ""type"": ""Value"",
                    ""id"": ""c23a0fb1-6fd7-4e7e-984c-7291b5af0d3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf6c850c-33c6-4fc5-b6d0-b6e9d4d80a04"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LastTerm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2fb1458-d68e-40a6-a80a-d92a9e2fc97f"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LastTerm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dbc9f08-5be2-4b00-9496-261e91695e12"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTerm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a3f36db-cd7f-40a5-a730-7c08d2394852"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTerm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""282d903e-ece2-4df0-b9f5-60b0e847e22a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decipher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aab7299-d567-4503-8e4c-8c7567838f37"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decipher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""6e8a5ce3-c75c-4c9a-bc9d-251046afcc69"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75dfa114-c782-470c-8235-47d6eef12957"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3215b8b3-ea46-4b72-bd7b-bdfc5632f5cb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7861f29-38d6-4110-9318-6dda8bd53448"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2e9c3be0-c257-45f8-9d26-cf5b92702b75"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBOX"",
                    ""id"": ""87bcb4b3-5163-4f61-82fe-79c11e98276a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""69ff69c0-f5c4-44ae-a9fe-93531c784091"",
                    ""path"": ""<XInputController>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5b1a9c3b-eccc-4be3-af67-e2056ff9ae11"",
                    ""path"": ""<XInputController>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""592c8e76-8ad0-4790-af89-c340e407534b"",
                    ""path"": ""<XInputController>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""169d5c7b-fb82-49a5-b276-638d28d38294"",
                    ""path"": ""<XInputController>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlterTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TechTree
            m_TechTree = asset.FindActionMap("TechTree", throwIfNotFound: true);
            m_TechTree_LastTerm = m_TechTree.FindAction("LastTerm", throwIfNotFound: true);
            m_TechTree_NextTerm = m_TechTree.FindAction("NextTerm", throwIfNotFound: true);
            m_TechTree_Decipher = m_TechTree.FindAction("Decipher", throwIfNotFound: true);
            m_TechTree_AlterTP = m_TechTree.FindAction("AlterTP", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TechTree
        private readonly InputActionMap m_TechTree;
        private List<ITechTreeActions> m_TechTreeActionsCallbackInterfaces = new List<ITechTreeActions>();
        private readonly InputAction m_TechTree_LastTerm;
        private readonly InputAction m_TechTree_NextTerm;
        private readonly InputAction m_TechTree_Decipher;
        private readonly InputAction m_TechTree_AlterTP;
        public struct TechTreeActions
        {
            private @TechTreeInput m_Wrapper;
            public TechTreeActions(@TechTreeInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @LastTerm => m_Wrapper.m_TechTree_LastTerm;
            public InputAction @NextTerm => m_Wrapper.m_TechTree_NextTerm;
            public InputAction @Decipher => m_Wrapper.m_TechTree_Decipher;
            public InputAction @AlterTP => m_Wrapper.m_TechTree_AlterTP;
            public InputActionMap Get() { return m_Wrapper.m_TechTree; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TechTreeActions set) { return set.Get(); }
            public void AddCallbacks(ITechTreeActions instance)
            {
                if (instance == null || m_Wrapper.m_TechTreeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TechTreeActionsCallbackInterfaces.Add(instance);
                @LastTerm.started += instance.OnLastTerm;
                @LastTerm.performed += instance.OnLastTerm;
                @LastTerm.canceled += instance.OnLastTerm;
                @NextTerm.started += instance.OnNextTerm;
                @NextTerm.performed += instance.OnNextTerm;
                @NextTerm.canceled += instance.OnNextTerm;
                @Decipher.started += instance.OnDecipher;
                @Decipher.performed += instance.OnDecipher;
                @Decipher.canceled += instance.OnDecipher;
                @AlterTP.started += instance.OnAlterTP;
                @AlterTP.performed += instance.OnAlterTP;
                @AlterTP.canceled += instance.OnAlterTP;
            }

            private void UnregisterCallbacks(ITechTreeActions instance)
            {
                @LastTerm.started -= instance.OnLastTerm;
                @LastTerm.performed -= instance.OnLastTerm;
                @LastTerm.canceled -= instance.OnLastTerm;
                @NextTerm.started -= instance.OnNextTerm;
                @NextTerm.performed -= instance.OnNextTerm;
                @NextTerm.canceled -= instance.OnNextTerm;
                @Decipher.started -= instance.OnDecipher;
                @Decipher.performed -= instance.OnDecipher;
                @Decipher.canceled -= instance.OnDecipher;
                @AlterTP.started -= instance.OnAlterTP;
                @AlterTP.performed -= instance.OnAlterTP;
                @AlterTP.canceled -= instance.OnAlterTP;
            }

            public void RemoveCallbacks(ITechTreeActions instance)
            {
                if (m_Wrapper.m_TechTreeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITechTreeActions instance)
            {
                foreach (var item in m_Wrapper.m_TechTreeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TechTreeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TechTreeActions @TechTree => new TechTreeActions(this);
        public interface ITechTreeActions
        {
            void OnLastTerm(InputAction.CallbackContext context);
            void OnNextTerm(InputAction.CallbackContext context);
            void OnDecipher(InputAction.CallbackContext context);
            void OnAlterTP(InputAction.CallbackContext context);
        }
    }
}
