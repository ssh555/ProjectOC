//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_ML/Engine/Input/CommomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ML.Engine.Input
{
    public partial class @CommomInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CommomInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CommomInput"",
    ""maps"": [
        {
            ""name"": ""Common"",
            ""id"": ""7f866e33-da0f-46d4-9574-607634f09ada"",
            ""actions"": [
                {
                    ""name"": ""Comfirm"",
                    ""type"": ""Button"",
                    ""id"": ""3b005375-d1a3-4413-91d0-31adb0879d8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""09cef832-34f8-464e-8f2b-224e1c2034db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""380f7fa1-f483-4987-a17c-3827a5fcb70c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Comfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9689dff5-f141-4dfe-8ddc-542391c65d9d"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Comfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b757e4d-fc5b-4ec6-bc48-24c3ad5b4802"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dde9783f-58d9-4638-b426-18c22a02e9e1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53c908d5-5dce-46da-bf16-c528f2132276"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Common
            m_Common = asset.FindActionMap("Common", throwIfNotFound: true);
            m_Common_Comfirm = m_Common.FindAction("Comfirm", throwIfNotFound: true);
            m_Common_Back = m_Common.FindAction("Back", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Common
        private readonly InputActionMap m_Common;
        private List<ICommonActions> m_CommonActionsCallbackInterfaces = new List<ICommonActions>();
        private readonly InputAction m_Common_Comfirm;
        private readonly InputAction m_Common_Back;
        public struct CommonActions
        {
            private @CommomInput m_Wrapper;
            public CommonActions(@CommomInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Comfirm => m_Wrapper.m_Common_Comfirm;
            public InputAction @Back => m_Wrapper.m_Common_Back;
            public InputActionMap Get() { return m_Wrapper.m_Common; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CommonActions set) { return set.Get(); }
            public void AddCallbacks(ICommonActions instance)
            {
                if (instance == null || m_Wrapper.m_CommonActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CommonActionsCallbackInterfaces.Add(instance);
                @Comfirm.started += instance.OnComfirm;
                @Comfirm.performed += instance.OnComfirm;
                @Comfirm.canceled += instance.OnComfirm;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }

            private void UnregisterCallbacks(ICommonActions instance)
            {
                @Comfirm.started -= instance.OnComfirm;
                @Comfirm.performed -= instance.OnComfirm;
                @Comfirm.canceled -= instance.OnComfirm;
                @Back.started -= instance.OnBack;
                @Back.performed -= instance.OnBack;
                @Back.canceled -= instance.OnBack;
            }

            public void RemoveCallbacks(ICommonActions instance)
            {
                if (m_Wrapper.m_CommonActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICommonActions instance)
            {
                foreach (var item in m_Wrapper.m_CommonActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CommonActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CommonActions @Common => new CommonActions(this);
        public interface ICommonActions
        {
            void OnComfirm(InputAction.CallbackContext context);
            void OnBack(InputAction.CallbackContext context);
        }
    }
}
