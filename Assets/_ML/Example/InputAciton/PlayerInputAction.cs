//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_ML/Example/InputAciton/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ML.Example.Input
{
    public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8cd95e8a-283c-42ff-af42-bc48c0ddea69"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ca903eb0-d478-4b3b-baa6-5cf393b60ea6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acc"",
                    ""type"": ""Button"",
                    ""id"": ""f40e48c5-1d64-4514-9bdd-3d40800379eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""4df1b140-4407-4449-82ba-ad27f88733d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1d06b6f3-d8fb-4245-b82b-f3e692ce704e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""021baf43-441a-4182-9a5a-596bacda70f3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Scale(factor=0.1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""Value"",
                    ""id"": ""5c05d374-0ee9-440f-868c-a312111bdd4e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Scale(factor=0.1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""48f95d05-93ca-4ac2-8e0b-819581db0eec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""7f56a5c8-74d1-4ece-9e56-167f88d8d514"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6b2759c-aff9-47c3-9922-7d68738b472d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c340f86-90ea-4eec-977a-7e0080a54cbb"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afb4e924-0e70-421c-98be-48ed13c6d163"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""InputDirection"",
                    ""id"": ""b2fe77f9-fa2a-4ebb-b296-3d6fd56962bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76f8e9e2-b2ca-43e7-8c1c-10e9ff4ac737"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""87d0fa97-92a7-4ccb-96e4-a2de802ec370"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2ca72652-b6a4-4eb7-a5f0-a70607a84e0c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""928439b9-240f-4acd-bd25-d534e6430d51"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MouseX"",
                    ""id"": ""0300f32d-0324-4740-86ff-3065e60b42e9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3c6e2a43-ad3b-43a1-91fb-8906634f3dbf"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""33b623f7-9613-4128-90a4-6e041f7c92be"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MouseY"",
                    ""id"": ""f2e79e28-1ad6-4942-ab34-e84ed109e82d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5615eecb-52c2-4f2a-bfe8-1b4adfb6b296"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2f8ae0b7-002b-47b3-83c8-36c35baa1ceb"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""66240ca2-927c-408a-84e0-1e5f585276c7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""892a9ee6-da8a-473b-90a9-16e0d6a5ecd4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerUI"",
            ""id"": ""4798033b-71dc-4790-8049-9b265bf9cf30"",
            ""actions"": [
                {
                    ""name"": ""OpenUI"",
                    ""type"": ""Button"",
                    ""id"": ""8f9375af-827c-4f93-ac3d-3ed31625d559"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseUI"",
                    ""type"": ""Button"",
                    ""id"": ""23c01106-87ae-416f-8370-33c51856c56d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Composite"",
                    ""type"": ""Button"",
                    ""id"": ""305d80fe-1cc9-4cc2-8d5d-6609a5c7706d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a2b1d2d-c47a-4087-99d5-69b42cc14521"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd082b02-73cc-4ee9-9a99-9b505c008cbe"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ef39a00-e449-4ab3-9cbe-5bb338560628"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Composite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Acc = m_Player.FindAction("Acc", throwIfNotFound: true);
            m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_MouseX = m_Player.FindAction("MouseX", throwIfNotFound: true);
            m_Player_MouseY = m_Player.FindAction("MouseY", throwIfNotFound: true);
            m_Player_PickUp = m_Player.FindAction("PickUp", throwIfNotFound: true);
            m_Player_ExitBuilding = m_Player.FindAction("ExitBuilding", throwIfNotFound: true);
            // PlayerUI
            m_PlayerUI = asset.FindActionMap("PlayerUI", throwIfNotFound: true);
            m_PlayerUI_OpenUI = m_PlayerUI.FindAction("OpenUI", throwIfNotFound: true);
            m_PlayerUI_CloseUI = m_PlayerUI.FindAction("CloseUI", throwIfNotFound: true);
            m_PlayerUI_Composite = m_PlayerUI.FindAction("Composite", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Acc;
        private readonly InputAction m_Player_Crouch;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_MouseX;
        private readonly InputAction m_Player_MouseY;
        private readonly InputAction m_Player_PickUp;
        private readonly InputAction m_Player_ExitBuilding;
        public struct PlayerActions
        {
            private @PlayerInputAction m_Wrapper;
            public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Acc => m_Wrapper.m_Player_Acc;
            public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @MouseX => m_Wrapper.m_Player_MouseX;
            public InputAction @MouseY => m_Wrapper.m_Player_MouseY;
            public InputAction @PickUp => m_Wrapper.m_Player_PickUp;
            public InputAction @ExitBuilding => m_Wrapper.m_Player_ExitBuilding;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Acc.started += instance.OnAcc;
                @Acc.performed += instance.OnAcc;
                @Acc.canceled += instance.OnAcc;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @ExitBuilding.started += instance.OnExitBuilding;
                @ExitBuilding.performed += instance.OnExitBuilding;
                @ExitBuilding.canceled += instance.OnExitBuilding;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Acc.started -= instance.OnAcc;
                @Acc.performed -= instance.OnAcc;
                @Acc.canceled -= instance.OnAcc;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @MouseX.started -= instance.OnMouseX;
                @MouseX.performed -= instance.OnMouseX;
                @MouseX.canceled -= instance.OnMouseX;
                @MouseY.started -= instance.OnMouseY;
                @MouseY.performed -= instance.OnMouseY;
                @MouseY.canceled -= instance.OnMouseY;
                @PickUp.started -= instance.OnPickUp;
                @PickUp.performed -= instance.OnPickUp;
                @PickUp.canceled -= instance.OnPickUp;
                @ExitBuilding.started -= instance.OnExitBuilding;
                @ExitBuilding.performed -= instance.OnExitBuilding;
                @ExitBuilding.canceled -= instance.OnExitBuilding;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // PlayerUI
        private readonly InputActionMap m_PlayerUI;
        private List<IPlayerUIActions> m_PlayerUIActionsCallbackInterfaces = new List<IPlayerUIActions>();
        private readonly InputAction m_PlayerUI_OpenUI;
        private readonly InputAction m_PlayerUI_CloseUI;
        private readonly InputAction m_PlayerUI_Composite;
        public struct PlayerUIActions
        {
            private @PlayerInputAction m_Wrapper;
            public PlayerUIActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenUI => m_Wrapper.m_PlayerUI_OpenUI;
            public InputAction @CloseUI => m_Wrapper.m_PlayerUI_CloseUI;
            public InputAction @Composite => m_Wrapper.m_PlayerUI_Composite;
            public InputActionMap Get() { return m_Wrapper.m_PlayerUI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerUIActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerUIActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerUIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerUIActionsCallbackInterfaces.Add(instance);
                @OpenUI.started += instance.OnOpenUI;
                @OpenUI.performed += instance.OnOpenUI;
                @OpenUI.canceled += instance.OnOpenUI;
                @CloseUI.started += instance.OnCloseUI;
                @CloseUI.performed += instance.OnCloseUI;
                @CloseUI.canceled += instance.OnCloseUI;
                @Composite.started += instance.OnComposite;
                @Composite.performed += instance.OnComposite;
                @Composite.canceled += instance.OnComposite;
            }

            private void UnregisterCallbacks(IPlayerUIActions instance)
            {
                @OpenUI.started -= instance.OnOpenUI;
                @OpenUI.performed -= instance.OnOpenUI;
                @OpenUI.canceled -= instance.OnOpenUI;
                @CloseUI.started -= instance.OnCloseUI;
                @CloseUI.performed -= instance.OnCloseUI;
                @CloseUI.canceled -= instance.OnCloseUI;
                @Composite.started -= instance.OnComposite;
                @Composite.performed -= instance.OnComposite;
                @Composite.canceled -= instance.OnComposite;
            }

            public void RemoveCallbacks(IPlayerUIActions instance)
            {
                if (m_Wrapper.m_PlayerUIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerUIActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerUIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerUIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerUIActions @PlayerUI => new PlayerUIActions(this);
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAcc(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnMouseX(InputAction.CallbackContext context);
            void OnMouseY(InputAction.CallbackContext context);
            void OnPickUp(InputAction.CallbackContext context);
            void OnExitBuilding(InputAction.CallbackContext context);
        }
        public interface IPlayerUIActions
        {
            void OnOpenUI(InputAction.CallbackContext context);
            void OnCloseUI(InputAction.CallbackContext context);
            void OnComposite(InputAction.CallbackContext context);
        }
    }
}
